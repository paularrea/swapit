{"version":3,"sources":["../src/ImagePreview.jsx"],"names":["ImagePreview","props","state","images","event","fileNameRegEx","RegExp","extensionRegex","extensionRegexFlags","files","target","setState","readAndPreview","file","test","name","size","maxFileSize","prevState","newImages","concat","window","URL","createObjectURL","onChange","exceedMaxFileSizeError","unsupportedTypeError","forEach","call","previewFiles","bind","map","image","wrapper","propTypes","PropTypes","func","string","number","defaultProps","e","filename","Error","undefined"],"mappings":"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","file":"ImagePreview.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ImagePreview extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      images: []\n    }\n  }\n\n  previewFiles(event) {\n\n    const fileNameRegEx = new RegExp(this.props.extensionRegex, this.props.extensionRegexFlags);\n    const files = event.target.files;\n\n    this.setState({\n      images: []\n    }, () => {\n      const readAndPreview = (file) => {\n\n        // Make sure `file.name` matches our extensions criteria\n        if (fileNameRegEx.test(file.name)) {\n\n          // Check the file size is under the limit\n          if (file.size <= this.props.maxFileSize) {\n\n            // Set the state of the component to reflect the new images array\n            this.setState((prevState, props) => {\n              const newImages = prevState.images.concat([window.URL.createObjectURL(file)]);\n              this.props.onChange(newImages);\n              return { images: newImages }\n            });\n          }\n          else {\n            // Display error indicating file is too large\n            throw exceedMaxFileSizeError(file.name);\n          }\n        }\n        else {\n          // Display error indicating unsupported file types\n          throw unsupportedTypeError(file.name);\n        }\n\n      }\n\n      // If there are files, run `readAndPreview` on each of them\n      if (files) {\n        [].forEach.call(files, readAndPreview);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <button label=\"Upload Images\">\n          <input type=\"file\" onChange={this.previewFiles.bind(this)} multiple />\n        </button>\n        <div>\n          {this.state.images.map((image) => (\n            this.props.wrapper(\n              <div key={image}>\n                <img src={image} />\n              </div>\n            )\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nImagePreview.propTypes = {\n  wrapper: React.PropTypes.func,\n  extensionRegex: React.PropTypes.string,\n  extensionRegexFlags: React.PropTypes.string,\n  unsupportedTypeError: React.PropTypes.func,\n  exceedMaxFileSizeError: React.PropTypes.func,\n  maxFileSize: React.PropTypes.number,\n  onChange: React.PropTypes.func,\n}\n\nImagePreview.defaultProps = {\n  wrapper: (e) => e,\n  extensionRegex: '\\.(jpe?g|png)$',\n  extensionRegexFlags: 'i',\n  unsupportedTypeError: (filename) => new Error(`${filename} has an unsupported file type`),\n  exceedMaxFileSizeError: (filename) => new Error(`${filename} is too large`),\n  maxFileSize: 5242880,\n  onChange: () => undefined\n}"]}